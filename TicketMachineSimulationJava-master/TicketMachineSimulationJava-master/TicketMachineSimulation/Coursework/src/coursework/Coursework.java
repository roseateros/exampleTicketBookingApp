package coursework;

import static coursework.Times.dates;
import java.awt.*; // AWT = Abstract Window Toolkit, required to create graphical user interface ( GUI) objects such as buttons etc
import java.awt.event.*;// Defines classes and interfaces used for event handling generated by .AWT and .Swing 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;// For creating GUI independent of windows systems. This ensures you program can run in non-windows OS

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

//The purpose of this program is to allow users to book tickets for movies ahead of time.
//almost all code is heavily commented for my own learning and notes.

public class Coursework extends JFrame implements ActionListener {

    //adding the components of the window before the main method.
    JButton refresh = new JButton("Refresh");
    JButton info = new JButton("Movie Info");
    JButton purchase = new JButton("Purchase");
    JButton receipt = new JButton("Receipt");
    JButton viewTimes = new JButton("View Times");
    JButton exit = new JButton("Exit");
    JScrollPane scroll = new JScrollPane();//this will hold the movielist
    JList movielist = new JList(MovieData.listMovie());//populates the list
    DefaultListModel listModel = new DefaultListModel();
    //using list model to add elements to JList. much easier than other methods.
    JList times = new JList(listModel);
    //JPanel right = new JPanel();

    public static void main(String[] args) throws IOException {
        Coursework window = new Coursework();//creates the GUI window for the class

    }

    public Coursework() { //constructor method 

        scroll.setViewportView(movielist);//diplays movielist inside scroll.

        //setting layout of the window
        setLayout(new BorderLayout()); // Sets the layout of the GUI
        setSize(1280, 720);
        setResizable(false);//user cannot resize.
        setLocationRelativeTo(null);//opens window in the center 
        setTitle("Cinema Ticket Machine");// sets the title of the window
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE); //closed when x is pressed.

        //adding the panels/components to them.
        JPanel top = new JPanel();//creates a panel to organise things
        top.add(refresh);//adds a component to the top panel
        refresh.addActionListener(this);//creates event for this object.        
        top.add(info);
        info.addActionListener(this);
        top.add(purchase);
        purchase.addActionListener(this);
        top.add(receipt);
        receipt.addActionListener(this);
        top.add(exit);
        exit.addActionListener(this);
        add("North", top);//adds the top JPanel to the window.

        scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.setPreferredSize(new Dimension(560, 200));
        JPanel left = new JPanel();//create left JPanel 

        left.add(scroll);//movielist added within the scrollpane.
        movielist.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        movielist.setPreferredSize(new Dimension(500, 400));
        movielist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);//only one value can be select at a time.
        movielist.setVisibleRowCount(-1);
        movielist.setSelectedIndex(2);//selected value starts at first index.
        add("West", left);//adds jpanel left

        JPanel right = new JPanel();//creates right jpanel.

        right.add(times);//adds second Jlist to window
        times.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        times.setPreferredSize(new Dimension(500, 400));
        times.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        add("East", right);//adds jpanel right.

        JPanel middle = new JPanel();
        middle.add(viewTimes);//user pressed this button to see times for their chosen movie.
        viewTimes.addActionListener(this);
        add("Center", middle);

        pack();//changes window size to fit all contents.
        setVisible(true);//makes the window visible.

    }
//this method is unused.
    public void showReceipt() {//this method was for testing. Actual viewReceipt() method is in receipt class.

        try {
            File myFile = new File("receipt.txt");//creates file object.
            Scanner inputFile = new Scanner(myFile);//scans file

            while (inputFile.hasNextLine()) {//testing to see if loop works printing to console.
                String str = inputFile.nextLine();
                System.out.println(str);
            }

            inputFile.close();//close file
        } catch (FileNotFoundException f) {

        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == viewTimes) {//shows dates/time for selected movie when button is pressed.
            try {
                int selVal = movielist.getSelectedIndex();
                String[] oo = Times.timeArrays(selVal);//oo is just a temporary String array variable to hold values              
                int i;
                listModel.clear();//clears the Jlist before adding new items to it.
                for (i = 0; i < oo.length; i++) { 
                    listModel.addElement(oo[i]);//loops though and adds elements to JList till none are remaining.
                }
            } catch (IndexOutOfBoundsException oob) {
                listModel.clear();
                listModel.addElement("Invalid Movie Selected or Movie times are unavailable.");//if user selects jlist header row or if movie does not have times.
                //message appears if list does not contain values.

            }

        }
        if (e.getSource() == refresh) {//this resets the application.
            dispose();
            Coursework window = new Coursework();
        }

        if (e.getSource() == purchase) {
            int b = times.getSelectedIndex();

            try {
                if (movielist.getSelectedIndex() > 1 && b > 0) { //to ensure that a user does not select the title rows of the Jlists.
                    dispose();
                    String namePurchase = movielist.getSelectedValue().toString();
                    String datePurchase = times.getSelectedValue().toString();

                    Purchase purchaseWindow = new Purchase(namePurchase, datePurchase);//pass variables for use in the Purchase class.
                    purchaseWindow.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Please select a movie and a time");//if either a null movie or no time is selected.

                }
            } catch (Error t) {
                JOptionPane.showMessageDialog(null, "Please select a movie and a time");
            }

        }

        if (e.getSource() == info) {
            //this makes it so the user cannot select the list items
            //that do not contain an invalid item and then open the info window
            try {
                int listitem = movielist.getSelectedIndex();
                if (movielist.getSelectedIndex() > 1) {
                    String passname = movielist.getSelectedValue().toString();
                    dispose();
                    int passint = movielist.getSelectedIndex();//passes index and dates method value.                    
                    Info info = new Info(passname, passint);
                    info.setVisible(true);//opens info window and makes it visible.
                } else {
                    JOptionPane.showMessageDialog(null, "Please Select a Movie First");//if no movie was selected.

                }
            } catch (NullPointerException n) {
                System.out.println("error, is NullPointerException");
            }

        }

        if (e.getSource() == receipt) {//shows use a receipt of the last purchase.
            dispose();
            Receipt rec = new Receipt();//receipt class creates window that show receipt of last transaction.
            rec.setVisible(true);
        }
        if (e.getSource() == exit) {//closes the application.
            dispose();
        }

    }

}
